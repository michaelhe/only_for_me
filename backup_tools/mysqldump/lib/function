function CheckBackup()
{
#   $1 means backup directory
    cd ${1}/${2}/
    backup_count=$(ls -l *.tar.bz2 | wc -l)
    if [ $backup_count -gt 10 ]; then
    for rmfile in $(find $scriptPath/$1/ -mtime +10 -print)
    do
        rm $rmfile
        backup_count_after_rm=$(ls -l *.tar.bz2 | wc -l)
        if [ $backup_count_after_rm -eq 10 ]; then
            break
        fi
        done
fi
}


function CheckFile() {
#   $1 means filename
    if [ ! -f "$1" ];then
        echo "$1 not found, please check it ..."
        exit 1
    fi
}

function CheckClusterFormat() {
    while read dbhostname dbip dbport dbusername dbpassword dbprefix
    do
        if [ -z "$dbprefix" ];then
            echo "Format error, please check ${1}/conf/cluster.conf..."
            exit 1
        fi
    done < ${1}/conf/cluster.conf
}

function CheckExcludeFormat() {
    while read dbhostname_in_exclude not_need_bak_db not_need_bak_tables
    do
        if [ -z "$not_need_bak_db" ];then
            echo "Format error, please check ${1}/conf/exclude.conf..."
            exit 1
        fi
    done < ${1}/conf/exclude.conf 
}

function FindHostAndDBAndTable_And_BuildBakList() {
#   $1 means mysql command
#   $2 means ${scriptPath}
    while read dbhostname dbip dbport dbusername dbpassword dbprefix
    do

        if [ "${dbhostname:0:1}" = "#" ];then
            continue
        fi

        linkparas="-h${dbip} -P${dbport} -u${dbusername} -p${dbpassword}"
        if [ ! -d ${2}/baktmp/${dbhostname} ];then    
            mkdir -p ${2}/baktmp/${dbhostname}
        fi
        echo "get databases which need to backup from mysql server ${dbhostname}"
        FindNeedBakDB "${dbhostname}" "${2}" "${1}" "$linkparas" "$dbprefix"
        FindDBTable "${dbhostname}" "${2}" "${1}" "${linkparas}"
    done < ${2}/conf/cluster.conf
}


function FindNeedBakDB() {
#   $1 means dbhostname -> ${dbhostname}
#   $2 means script pwd -> ${scriptPath}
#   $3 means mysql command -> ${mysql_exec}
#   $4 means paras to connect to server -> $linkparas
#   $5 means databases prefix -> $dbprefix
    cat /dev/null > ${2}/baktmp/${1}/${1}.dbs.list 
    for dbsingleprefix in $5 
    do
        ${3} ${4} -e"show databases;" | grep ${dbsingleprefix} >> ${2}/baktmp/${1}/${1}.dbs.list 
     
        if [ ! -f "${2}/baktmp/${1}/${1}.dbs.list" ];then 
            echo "./${1}.dbs.list not found!" 
            exit 1 
        fi 
     
        if [ -s "${2}/conf/exclude.conf" ];then
            while read dbhostname_in_exclude not_need_bak_db not_need_bak_table_prefixs
            do 

                 if [ "${dbhostname_in_exclude:0:1}" = "#" ];then
                     continue
                 fi

                if [ "$dbhostname_in_exclude" = "$1" ];then
                    if [  -z "$not_need_bak_table_prefixs" ];then
                        sed -i  "/^${not_need_bak_db}$/d" ${2}/baktmp/${1}/${1}.dbs.list
                    else
                        if [ ! -d "${2}/baktmp/${1}/${not_need_bak_db}" ];then
                            mkdir -p ${2}/baktmp/${1}/${not_need_bak_db}
                        fi
                        for not_need_bak_table_prefix in $not_need_bak_table_prefixs
                        do
                            $3 $4 -e"show tables from ${not_need_bak_db};" | grep -v "Tables_in" | grep "$not_need_bak_table_prefix" >> ${2}/baktmp/${1}/${not_need_bak_db}/${not_need_bak_db}.excludetables.list.tmp
                        done
                        sort ${2}/baktmp/${1}/${not_need_bak_db}/${not_need_bak_db}.excludetables.list.tmp | uniq > ${2}/baktmp/${1}/${not_need_bak_db}/${not_need_bak_db}.excludetables.list
                        rm ${2}/baktmp/${1}/${not_need_bak_db}/${not_need_bak_db}.excludetables.list.tmp
                        
                    fi
                fi
            done < "${2}/conf/exclude.conf"
#            FindDBTable "$1" "$2" "$3" "$4" 
        fi 
    done 
}
 

function FindDBTable() {
#   $1 means ${dbhostname}
#   $2 means ${scriptPath}
#   $3 means mysql command
#   $4 means paras connect to mysql server
    while read dbname_in_list
    do
        echo "get need backup tables from host->${1} database->${dbname_in_list}"
        if [ ! -d "${2}/baktmp/${1}/${dbname_in_list}" ];then
            mkdir -p ${2}/baktmp/${1}/${dbname_in_list}
        fi
        ${3} ${4} -e"show tables from ${dbname_in_list}" | grep -v "Tables_in" > ${2}/baktmp/${1}/${dbname_in_list}/${dbname_in_list}.tables.list
        while read dbhostname_in_exclude not_need_bak_db not_need_bak_tables
        do

            if [ "${dbhostname_in_exclude:0:1}" = "#" ];then
                 continue
            fi
            if [ -f "${2}/baktmp/${1}/${dbname_in_list}/${dbname_in_list}.excludetables.list" ];then
            while read not_need_bak_table
            do
                sed -i "/^${not_need_bak_table}$/d" ${2}/baktmp/${1}/${dbname_in_list}/${dbname_in_list}.tables.list
            done < ${2}/baktmp/${1}/${dbname_in_list}/${dbname_in_list}.excludetables.list
            fi
#            for not_need_bak_table in $not_need_bak_tables
#                do
#                sed -i "/^${not_need_bak_table}$/d" ${2}/baktmp/${1}/${dbname_in_list}/${dbname_in_list}.tables.list
#            done
        done < "${2}/conf/exclude.conf"

        echo "Build backup list base on tables for host->${1} database->${dbname_in_list}"
        BuildBakListBaseTable "$1" "$2" "$4" "${dbname_in_list}"
    done < ${2}/baktmp/${1}/${1}.dbs.list
}


function BuildBakListBaseTable() {
#   $1 means ${dbhostname}
#   $2 means ${scriptPath}
#   $3 means means paras connect to mysql server
#   $4 means dbname -> ${dbname_in_list}
    dbhostname=$1
    scriptPath=$2
    paras=$3
    dbname=$4
    awk '{print "'"$dbhostname"'","'"$paras"'","'"$dbname"'",$1}' ${scriptPath}/baktmp/${dbhostname}/${dbname}/${dbname}.tables.list >> ${scriptPath}/baktmp/BakBaseTable.list
}

function StartBakBaseTable() {
#   $1 means mysqldump command
#   $2 means ${scriptPath}
    echo "Start backing up......."
    while read dbhostname dbip dbport dbusername dbpassword dbname dbtablename
    do
        ${1} ${dbip} ${dbport} ${dbusername} ${dbpassword} ${dbname} ${dbtablename} > ${2}/baktmp/${dbhostname}/${dbname}/${dbtablename}.sql
    done < ${2}/baktmp/BakBaseTable.list
}






function FindHostAndDB_And_BuildBakList() {
#   $1 means mysql command
#   $2 means ${scriptPath}
    while read dbhostname dbip dbport dbusername dbpassword dbprefix
    do

        if [ "${dbhostname:0:1}" = "#" ];then
            continue
        fi

        linkparas="-h${dbip} -P${dbport} -u${dbusername} -p${dbpassword}"
        if [ ! -d ${2}/baktmp/${dbhostname} ];then    
            mkdir -p ${2}/baktmp/${dbhostname}
        fi
        echo "get databases which need to backup from mysql server ${dbhostname}"
        FindNeedBakDB "${dbhostname}" "${2}" "${1}" "$linkparas" "$dbprefix"
        BuildBakListBaseDB "${dbhostname}" "${2}" "$linkparas"
    done < ${2}/conf/cluster.conf
}

function BuildBakListBaseDB() {
#   $1 means dbhostname -> ${dbhostname}
#   $2 means script pwd -> ${scriptPath}
#   $3 means paras to connect to server -> $linkparas
    dbhostname=$1
    scriptPath=$2
    paras=$3
    dbname=$4
    awk '{print "'"$dbhostname"'","'"$paras"'",$1}' ${scriptPath}/baktmp/${dbhostname}/${dbhostname}.dbs.list >> ${scriptPath}/baktmp/BakBaseDB.list
}

function StartBakBaseDB() {
#   $1 means mysqldump command
#   $2 means ${scriptPath}
    echo "Start backing up......."
    while read dbhostname dbip dbport dbusername dbpassword dbname
    do
        ${1} ${dbip} ${dbport} ${dbusername} ${dbpassword} ${dbname}  > ${2}/baktmp/${dbhostname}/${dbname}.sql
    done < ${2}/baktmp/BakBaseDB.list
}
